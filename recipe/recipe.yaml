# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json

context:
  version: "0.8.1"
  build_number: 1
  torch_proc_type: ${{ "cuda" ~ cuda_compiler_version | version_to_buildstring if cuda_compiler_version != "None" else "cpu" }}
  string_prefix: ${{ cuda_build_string if cuda == "true" else "cpu_" }}

recipe:
  name: torchcodec-split
  version: ${{ version }}

source:
  - url: https://github.com/pytorch/torchcodec/archive/refs/tags/v${{ version }}.tar.gz
    sha256: 86e2d8919fecf8f7c171057a120acce721d059f1625f45cdd6cf88b0035cbd52
    patches:
      - use_strict_threshold_only_for_linux_x86_64.patch
      - increase_test_against_cli_mp3_tol.patch
      - if: win
        then:
          - use_correct_python_on_windows.patch

build:
  number: ${{ build_number }}
  skip:
    # PyTorch does not support cuda 11
    - cuda_compiler_version == "11.8"
  string: ${{ torch_proc_type }}_py${{ python | version_to_buildstring }}_h${{ hash }}_${{ build_number }}

outputs:
  - package:
      name: torchcodec
    build:
      script:
        file: build
    requirements:
      build:
        - if: build_platform != target_platform
          then:
            - python
            - cross-python_${{ target_platform }}
            - pytorch
            - if: cuda_compiler_version != "None"
              then:
                - cuda-driver-dev
                - cuda-cudart-dev
                - cuda-nvrtc-dev
                - cuda-nvtx-dev
                - cuda-nvml-dev
                - cuda-profiler-api
                - libcublas-dev
                - libcufft-dev
                - libcurand-dev
                - libcusolver-dev
                - libcusparse-dev
        - ${{ compiler('cxx') }}
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - if: cuda_compiler_version != "None"
          then:
            - ${{ compiler('cuda') }}
        - cmake
        - pkgconf
        - ninja

      host:
        - python
        - pip
        - setuptools
        - ffmpeg
        # During the build, we link against the lgpl version of ffmpeg, to avoid license violation (and so we pass
        # I_CONFIRM_THIS_IS_NOT_A_LICENSE_VIOLATION to the wheel build to confirm that we want indeed to link to conda-forge's
        # ffmpeg. At runtime the user can install either lgpl or gpl ffmpeg as preferred
        - ffmpeg * [build=lgpl_*]
        - libtorch
        - libtorch * [build=${{ torch_proc_type }}*]
        - pytorch
        - pytorch * [build=${{ torch_proc_type }}*]
        - pybind11
        - if: cuda_compiler_version != "None"
          then:
            # These are dev packages (headers etc.) for transitive dependencies of libtorch
            - cuda-version ==${{ cuda_compiler_version }}
            - if: linux
              then:
                - cuda-driver-dev
                - nccl
            - cuda-cudart-dev
            - cuda-nvrtc-dev
            - cuda-nvtx-dev
            - cuda-nvml-dev
            - cuda-profiler-api
            - libcublas-dev
            - libcufft-dev
            - libcurand-dev
            - libcusolver-dev
            - libcusparse-dev
            - magma
            - nvtx-c
            # These are actual torchcodec deps
            - libnpp-dev
      run:
        - python
        - pytorch * [build=${{ torch_proc_type }}*]

    tests:
      - python:
          imports:
            - torchcodec
          pip_check: true

  - package:
      name: torchcodec-tests
    build:
      # On Windows we run a script to transform the symlinked test files in
      # actual copied files, as symlinks are not well supported on Windows
      script:
        - if: unix
          then:
            - python $RECIPE_DIR/remove_symlinks_from_test_on_windows.py
        - if: win
          then:
            - python %RECIPE_DIR%\\remove_symlinks_from_test_on_windows.py
    requirements:
      build:
        # To run the remove_symlinks_from_test_on_windows.py script
        - python
      run:
        - ${{ pin_subpackage('torchcodec', exact=True) }}
    tests:
      - files:
          source:
            - test/
        requirements:
          run:
            - pytest
            - numpy
            - pillow
            - torchvision
        script:
          # osx-64 (macOS on Intel) is not explicitly supported by torchcodec, see https://github.com/conda-forge/torchcodec-feedstock/pull/11
          # and https://github.com/conda-forge/torchcodec-feedstock/pull/38#issuecomment-3456998748
          # As long as the vast majority of test pass, it should be ok to just skip the few tests that do not pass
          - if: target_platform == "osx-64"
            then:
              - pytest --deselect test/test_encoders.py --deselect test/test_ops.py::TestVideoEncoderOps::test_against_to_file --deselect test/test_ops.py::TestVideoEncoderOps::test_video_encoder_round_trip --deselect test/test_ops.py::TestVideoDecoderOps::test_throws_exception_at_eof[cpu] --deselect test/test_ops.py::TestVideoDecoderOps::test_throws_exception_if_seek_too_far[cpu] --deselect test/test_ops.py::TestAudioDecoderOps::test_next[asset0] --deselect test/test_ops.py::TestAudioDecoderOps::test_next[asset1] test
            else:
              - pytest test

about:
  homepage: https://github.com/pytorch/torchcodec
  license: BSD-3-Clause
  license_file:
    - LICENSE
  summary: TorchCodec is a Python library for decoding videos into PyTorch tensors, on CPU and CUDA GPU.

extra:
  recipe-maintainers:
    - traversaro
  feedstock-name: torchcodec
