# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json

context:
  name: torchcodec
  version: "0.2.1"
  build_number: 0
  torch_proc_type: ${{ "cuda" ~ cuda_compiler_version | version_to_buildstring if cuda_compiler_version != "None" else "cpu" }}
  string_prefix: ${{ cuda_build_string if cuda == "true" else "cpu_" }}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  - url: https://github.com/pytorch/torchcodec/archive/refs/tags/v${{ version }}.tar.gz
    sha256: b142ef4fef1e9ddb6dde70dda6ac4d12a02a010065230468eadbf37478621927

build:
  number: ${{ build_number }}
  skip: 
    # temporarily, we are running out of space in staged-recipes and will fix this in the feedstock
    - cuda_compiler_version != "None"
    # PyTorch does not support cuda 11
    - cuda_compiler_version == "11.8"
    # Upstream does not support Windows at the moment https://github.com/pytorch/torchcodec/issues/522
    - win
  string: ${{ torch_proc_type }}_py${{ python | version_to_buildstring }}_h${{ hash }}_${{ build_number }}
  script:
    file: build

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - pytorch
        - if: cuda_compiler_version != "None"
          then:
            - cuda-driver-dev
            - cuda-cudart-dev
            - cuda-nvrtc-dev
            - cuda-nvtx-dev
            - cuda-nvml-dev
            - cuda-profiler-api
            - libcublas-dev
            - libcufft-dev
            - libcurand-dev
            - libcusolver-dev
            - libcusparse-dev
    - ${{ compiler('cxx') }}
    - ${{ compiler('c') }}
    - ${{ stdlib("c") }}
    - if: cuda_compiler_version != "None"
      then:
        - ${{ compiler('cuda') }}
    - cmake
    - pkg-config
    - make

  host:
    - python
    - pip
    - setuptools
    - ffmpeg
    # During the build, we link against the lgpl version of ffmpeg, to avoid license violation (and so we pass 
    # I_CONFIRM_THIS_IS_NOT_A_LICENSE_VIOLATION to the wheel build to confirm that we want indeed to link to conda-forge's
    # ffmpeg. At runtime the user can install either lgpl or gpl ffmpeg as preferred
    - ffmpeg * [build=lgpl_*]
    # This explicit pinning is a workaround for the fact that torchcodec 0.2.1 requires torch 2.6, but the pinned version is still 2.5.1
    - libtorch 2.6.*
    - libtorch * [build=${{ torch_proc_type }}*]
    - pytorch 2.6.*
    - pytorch * [build=${{ torch_proc_type }}*]

    - if: cuda_compiler_version != "None"
      then:
        # These are dev packages (headers etc.) for transitive dependencies of libtorch
        - cuda-driver-dev
        - cuda-cudart-dev
        - cuda-nvrtc-dev
        - cuda-nvtx-dev
        - cuda-nvml-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcufft-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
        - magma
        - nccl
        - nvtx-c
        # These are actual torchcodec deps
        - libnpp-dev
  run:
    - python
    - pytorch * [build=${{ torch_proc_type }}*]


tests:
  - python:
      imports:
        - torchcodec
      pip_check: true

  # test runs fine, but they increase the package size a lot as the
  # test include big videos. So for now they are skipped, and it will
  # be re-enabled in the feedstock with an appropriate strategy (such as
  # packaging them as a separate `torchcodec-tests`), for the time being the
  # tests are just run as part of the build recipe
  # - requirements:
  #    run:
  #      - pytest
  #      - numpy
  #      - pillow
  #      - torchvision
  #  files:
  #    source:
  #      - test/
  #  script:
  #    - pytest test

about:
  homepage: https://github.com/pytorch/torchcodec
  license: BSD-3-Clause
  license_file:
    - LICENSE
  summary: TorchCodec is a Python library for decoding videos into PyTorch tensors, on CPU and CUDA GPU. 

extra:
  recipe-maintainers:
    - traversaro
